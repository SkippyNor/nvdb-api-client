plugins {
    id "com.jfrog.bintray" version "1.7"
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'pl.allegro.tech.build.axion-release' version '1.9.3'
}

apply plugin: 'java-library'
apply from: "gradle/git.gradle"
apply from: "gradle/versioning.gradle"
apply from: "gradle/repositories.gradle"
apply from: "gradle/publish.gradle"

group = "no.vegvesen.nvdb"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

dependencies {
    api "com.google.code.gson:gson:2.8.5"
    api "org.slf4j:slf4j-api:1.7.25"

    implementation "org.glassfish.jersey.core:jersey-client:2.27"
    implementation "org.glassfish.jersey.connectors:jersey-apache-connector:2.27"
    implementation "org.glassfish.jersey.inject:jersey-hk2:2.27"
    implementation "io.projectreactor:reactor-core:3.2.2.RELEASE"

    testImplementation "junit:junit:4.12"
    testRuntimeOnly 'ch.qos.logback:logback-site:1.2.2'
}

jar {
    manifest.attributes "Created-By": rootProject.getProperty("build.vendor")
    manifest.attributes "Implementation-Title": project.name
    manifest.attributes "Implementation-Version": project.version
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

task writeBuildInfo {
    doLast {
        Properties properties = new Properties();
        properties.put("git.branch", git_branch);
        properties.put("git.hash", git_shorthash);
        properties.put("git.date", git_date.toString());
        properties.put("build.version", version);
        properties.put("build.date", build_date.toString());
        properties.put("build.builder", build_builder.toString());

        def resourceDir = new File("${buildDir}/resources/main/")
        resourceDir.mkdirs()
        new File(resourceDir, "build.properties").withWriter { writer ->
            properties.store(writer, null)
        }
    }
}

processResources.dependsOn(writeBuildInfo)
